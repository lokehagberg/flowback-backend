# Generated by Django 4.0.8 on 2022-11-14 15:27

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('group', '0005_group_hide_poll_users'),
    ]

    operations = [
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('poll_type', models.IntegerField(choices=[(1, 'ranking'), (2, 'for_against'), (3, 'schedule')])),
                ('active', models.BooleanField(default=True)),
                ('public', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField()),
                ('proposal_end_date', models.DateTimeField()),
                ('prediction_end_date', models.DateTimeField()),
                ('delegate_vote_end_date', models.DateTimeField()),
                ('vote_end_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('finished', models.BooleanField(default=False)),
                ('result', models.BooleanField(default=False)),
                ('participants', models.IntegerField(default=0)),
                ('dynamic', models.BooleanField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='group.grouptags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollDelegateVoting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuserdelegatepool')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
            ],
            options={
                'unique_together': {('created_by', 'poll')},
            },
        ),
        migrations.CreateModel(
            name='PollProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollVoting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
            ],
            options={
                'unique_together': {('created_by', 'poll')},
            },
        ),
        migrations.CreateModel(
            name='PollProposalTypeSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('proposal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='poll.pollproposal')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollVotingTypeRanking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('priority', models.IntegerField()),
                ('score', models.IntegerField(default=0)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.pollvoting')),
                ('author_delegate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.polldelegatevoting')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollproposal')),
            ],
            options={
                'unique_together': {('author', 'priority'), ('author_delegate', 'priority')},
            },
        ),
        migrations.CreateModel(
            name='PollVotingTypeForAgainst',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vote', models.BooleanField()),
                ('score', models.IntegerField(default=0)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.pollvoting')),
                ('author_delegate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.polldelegatevoting')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollproposal')),
            ],
            options={
                'unique_together': {('author', 'proposal'), ('author_delegate', 'proposal')},
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='pollvotingtyperanking',
            trigger=pgtrigger.compiler.Trigger(name='protects_author_or_author_delegate', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN ((NEW."author_id" IS NULL AND NEW."author_delegate_id" IS NULL) OR (NEW."author_id" IS NOT NULL AND NEW."author_delegate_id" IS NOT NULL))', func="RAISE EXCEPTION 'pgtrigger: Cannot insert or update rows from % table', TG_TABLE_NAME;", hash='b475740f10a35f5a575603f5bc855550b0888c29', operation='INSERT OR UPDATE', pgid='pgtrigger_protects_author_or_author_delegate_c765f', table='poll_pollvotingtyperanking', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='pollvotingtypeforagainst',
            trigger=pgtrigger.compiler.Trigger(name='protects_author_or_author_delegate', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN ((NEW."author_id" IS NULL AND NEW."author_delegate_id" IS NULL) OR (NEW."author_id" IS NOT NULL AND NEW."author_delegate_id" IS NOT NULL))', func="RAISE EXCEPTION 'pgtrigger: Cannot insert or update rows from % table', TG_TABLE_NAME;", hash='20d230b97a5408ec7601f37319a875065a0b826a', operation='INSERT OR UPDATE', pgid='pgtrigger_protects_author_or_author_delegate_4ba2a', table='poll_pollvotingtypeforagainst', when='BEFORE')),
        ),
    ]
